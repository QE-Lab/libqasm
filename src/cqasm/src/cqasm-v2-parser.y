%define api.pure full
%define api.prefix {cqasm_v2}
%locations

%code requires {
    /**
     * \file
     * Parser, generated by Bison.
     */
    #include <memory>
    #include <cstdio>
    #include <cstdint>
    #include "cqasm-annotations.hpp"
    #include "cqasm-v2-ast.hpp"
    #include "cqasm-v2-parse-helper.hpp"
    using namespace cqasm::v2::ast;
    typedef void* yyscan_t;

    #define YYSTYPE CQASM_V2STYPE
    #define YYLTYPE CQASM_V2LTYPE

}

%code {
    int yylex(YYSTYPE* yylvalp, YYLTYPE* yyllocp, yyscan_t scanner);
    void yyerror(YYLTYPE* yyllocp, yyscan_t scanner, cqasm::v2::parser::ParseHelper &helper, const char* msg);
}

%code top {

    /**
     * Attaches a source location annotation object to the given node pointer.
     */
    #define ADD_SOURCE_LOCATION(v)                              \
        v->set_annotation(cqasm::annotations::SourceLocation(   \
            helper.filename,                                    \
            yyloc.first_line,                                   \
            yyloc.first_column,                                 \
            yyloc.last_line,                                    \
            yyloc.last_column))

    /**
     * Constructs an empty, new node of type T and places it into v. v is almost
     * always $$ (the result location), but it can't be made part of the
     * definition because preprocessing happens after bison's substitution.
     */
    #define NEW(v, T)           \
        v = new T();            \
        ADD_SOURCE_LOCATION(v)

    /**
     * Moves previously constructed node s into t, where s is almost always one
     * of bison's input locations ($1, $2, etc) and t is almost always $$. The
     * purpose of this over just assigning t = s is that it extends the source
     * location annotation of the object to the extents of whatever rule is
     * being matched.
     */
    #define FROM(t, s)                                                                  \
        t = s;                                                                          \
        {                                                                               \
            auto *loc = t->get_annotation_ptr<cqasm::annotations::SourceLocation>();    \
            if (!loc) {                                                                 \
                ADD_SOURCE_LOCATION(t);                                                 \
            } else {                                                                    \
                loc->expand_to_include(yyloc.first_line, yyloc.first_column);           \
                loc->expand_to_include(yyloc.last_line, yyloc.last_column);             \
            }                                                                           \
        }

}

%param { yyscan_t scanner }
%parse-param { cqasm::v2::parser::ParseHelper &helper }

/* YYSTYPE union */
%union {
    char           	        *str;
    StringBuilder           *strb;
    DecimalIntegerLiteral   *dlit;
    IntegerLiteral          *ilit;
    RealLiteral             *rlit;
    StringLiteral           *slit;
    JsonLiteral             *jlit;
    Identifier              *idnt;
    ScopeModifier           *smod;
    LifetimeModifier        *lmod;
    ImplementationModifier  *imod;
    Modifiers               *mods;
    AnnotationData          *adat;
    Annotations             *anns;
    IfElifElseBlock         *ieeb;
    MatchBlock              *matb;
    Unit                    *unit;
    Version                 *vers;
    Program                 *prog;
};

/* Typenames for nonterminals */
%type <strb> StringBuilder
%type <dlit> DecIntLiteral
%type <ilit> IntegerLiteral
%type <rlit> RealLiteral
%type <slit> StringLiteral
%type <jlit> JsonLiteral
%type <idnt> SimpleIdent Identifier LoopLabel
%type <smod> ScopeMod
%type <lmod> LifetimeMod
%type <imod> ImplMod
%type <mods> Modifiers
%type <adat> AnnotationData
%type <anns> Annotations
%type <ieeb> IfElif
%type <matb> MatchArms MatchBody
%type <unit> ReturnType OptUnit OptUnitReturn Unit
%type <vers> VersionBuilder Version
%type <prog> Program

/* FIXME: no %destructor for the new-allocated nodes above, so the parser may
    leak, especially when it recovers from an error. */

/* Version statement */
%token KW_VERSION

/* Include statement */
%token KW_INCLUDE

/* Definition and declaration keywords */
%token KW_TEMPLATE
%token KW_PARAMETER
%token KW_QUBIT
%token KW_VAR
%token KW_CONST
%token KW_ALIAS
%token KW_FUNCTION
%token KW_OPERATOR
%token KW_TYPE

/* Scope modifier keywords */
%token KW_EXPORT
%token KW_GLOBAL

/* Lifetime modifier keywords */
%token KW_STATIC
%token KW_FUTURE

/* Implementation style keywords */
%token KW_INLINE
%token KW_RUNTIME
%token KW_PRIMITIVE

/* Conditional flow control keywords */
%token KW_COND
%token KW_IF
%token KW_ELIF
%token KW_ELSE
%token KW_MATCH
%token KW_WHEN

/* Looping flow control keywords */
%token KW_FOR
%token KW_FOREACH
%token KW_WHILE
%token KW_REPEAT
%token KW_UNTIL

/* Keywords for special instructions */
%token KW_GOTO
%token KW_RETURN
%token KW_BREAK
%token KW_CONTINUE
%token KW_PRINT
%token KW_ABORT
%token KW_SEND
%token KW_RECEIVE
%token KW_PRAGMA

/* Transposed index notation keyword */
%token KW_TRANSPOSE

/* Numeric literals */
%token <str> INT_LITERAL_DEC INT_LITERAL_HEX INT_LITERAL_BIN
%token <str> REAL_LITERAL
%token BAD_NUMBER

/* String and JSON literals */
%token STRING_OPEN STRING_CLOSE
%token JSON_OPEN JSON_CLOSE
%token <str> STRBUILD_APPEND STRBUILD_ESCAPE

/* Identifiers */
%token <str> IDENTIFIER

/* Multi-character operators */
%token INCREMENT
%token DECREMENT
%token POWER
%token INT_DIV
%token ARITH_SHR
%token LOGIC_SHR
%token SHL
%token CMP_GE
%token CMP_LE
%token CMP_EQ
%token CMP_NE
%token LOGIC_AND
%token LOGIC_OR
%token RANGE
%token ARROW

/* Mutation operators */
%token POWER_BY
%token MULTIPLY_BY
%token DIVIDE_BY
%token INT_DIV_BY
%token MODULO_BY
%token INCREMENT_BY
%token DECREMENT_BY
%token SHL_BY
%token ARITH_SHR_BY
%token LOGIC_SHR_BY
%token BITWISE_AND_BY
%token BITWISE_OR_BY
%token BITWISE_XOR_BY

/* Error marker tokens */
%token BAD_CHARACTER END_OF_FILE

/* Associativity rules for static expressions. The lowest precedence level
comes first. */
%left ';'                                    /* Semicolon operator */
%nonassoc OPT_UNIT                           /* Return statement */
%nonassoc KW_QUBIT KW_VAR KW_CONST KW_ALIAS  /* Definitions */
          KW_TYPE KW_FUNCTION KW_PARAMETER
          KW_INCLUDE
%nonassoc OPT_UNIT_RETURN KW_RETURN          /* Return statement */
%left ','                                    /* Comma operator */
%nonassoc KW_TEMPLATE                        /* Template modifier for function parameters */
%right KW_COND KW_IF KW_ELIF KW_ELSE         /* Flow-control constructs */
       KW_MATCH KW_WHEN KW_FOR KW_FOREACH
       KW_WHILE KW_REPEAT KW_UNTIL KW_SEND
       KW_RECEIVE KW_BREAK KW_CONTINUE
       KW_PRINT KW_ABORT KW_PRAGMA
%nonassoc ARROW RETURN_TYPE                  /* Handles the SR conflicts for optional return types of functions and control-flow */
%left ANNOT '@'                              /* Annotation operator without arguments */
%left ANNOT_ARGS                             /* Annotation operator with arguments */
%right '=' POWER_BY MULTIPLY_BY DIVIDE_BY    /* Assignments */
       INT_DIV_BY MODULO_BY INCREMENT_BY
       DECREMENT_BY SHL_BY ARITH_SHR_BY
       LOGIC_SHR_BY BITWISE_AND_BY
       BITWISE_OR_BY BITWISE_XOR_BY
%nonassoc ':'                                /* Declaration operator */
%left RANGE                                  /* Range operator */
%right TERNARY                               /* Ternary conditional */
%left LOGIC_OR                               /* Logical OR */
%left LOGIC_AND                              /* Logical AND */
%left '|'                                    /* Bitwise OR */
%left '^'                                    /* Bitwise XOR */
%left '&'                                    /* Bitwise AND */
%left CMP_EQ CMP_NE                          /* Equalities */
%left '>' '<' CMP_GE CMP_LE                  /* Inequalities */
%left SHL ARITH_SHR LOGIC_SHR                /* Bit shifts */
%left '+' '-'                                /* Addition/subtraction */
%left '*' '/' INT_DIV '%'                    /* Multiplication/division */
%right POWER                                 /* Power */
%right INCREMENT DECREMENT PREFIX            /* Prefix unary operators */
%left '(' '[' '{' POSTFIX                    /* Function call, indexation, postfix unary operators */
%nonassoc KW_OPERATOR                        /* Operator prefix */

/* Misc. Yacc directives */
%error-verbose
%start Root

%%

/* String builder. This accumulates JSON/String data, mostly
character-by-character. */
StringBuilder   : StringBuilder STRBUILD_APPEND                                 { FROM($$, $1);
                                                                                    $$->push_string(std::string($2));
                                                                                    std::free($2);
                                                                                }
                | StringBuilder STRBUILD_ESCAPE                                 { FROM($$, $1);
                                                                                    $$->push_escape(std::string($2));
                                                                                    std::free($2);
                                                                                }
                |                                                               { NEW($$, StringBuilder); }
                ;

/* Integer literals. */
DecIntLiteral   : INT_LITERAL_DEC                                               { NEW($$, DecimalIntegerLiteral);
                                                                                    $$->value = std::string($1);
                                                                                    std::free($1);
                                                                                }
                ;

IntegerLiteral  : DecIntLiteral                                                 { FROM($$, $1); }
                | INT_LITERAL_HEX                                               { NEW($$, HexadecimalIntegerLiteral);
                                                                                    $$->value = std::string($1);
                                                                                    std::free($1);
                                                                                }
                | INT_LITERAL_BIN                                               { NEW($$, BinaryIntegerLiteral);
                                                                                    $$->value = std::string($1);
                                                                                    std::free($1);
                                                                                }
                ;

/* Real-number literals. */
RealLiteral     : REAL_LITERAL                                                  { NEW($$, RealLiteral);
                                                                                    $$->value = std::string($1);
                                                                                    std::free($1);
                                                                                }
                ;

/* String literal. */
StringLiteral   : STRING_OPEN StringBuilder STRING_CLOSE                        { NEW($$, StringLiteral);
                                                                                    $$->value = $2->stream.str();
                                                                                    delete $2;
                                                                                }
                ;

/* JSON literal. */
JsonLiteral     : JSON_OPEN StringBuilder JSON_CLOSE                            { NEW($$, JsonLiteral);
                                                                                    $$->value = "{" + $2->stream.str() + "}";
                                                                                    delete $2;
                                                                                }
                ;

/* Identifiers. */
SimpleIdent     : IDENTIFIER                                                    { NEW($$, Identifier);
                                                                                    $$->name = std::string($1);
                                                                                    std::free($1);
                                                                                }
                ;

Identifier      : SimpleIdent                                                   { FROM($$, $1); }
                | KW_OPERATOR IDENTIFIER                %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator " + std::string($2); std::free($2); }
                | KW_OPERATOR '~'                       %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator~"; }
                | KW_OPERATOR '!'                       %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator!"; }
                | KW_OPERATOR '*'                       %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator*"; }
                | KW_OPERATOR POWER                     %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator**"; }
                | KW_OPERATOR '/'                       %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator/"; }
                | KW_OPERATOR INT_DIV                   %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator//"; }
                | KW_OPERATOR '%'                       %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator%"; }
                | KW_OPERATOR '+'                       %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator+"; }
                | KW_OPERATOR '-'                       %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator-"; }
                | KW_OPERATOR SHL                       %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator<<"; }
                | KW_OPERATOR ARITH_SHR                 %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator>>"; }
                | KW_OPERATOR LOGIC_SHR                 %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator>>>"; }
                | KW_OPERATOR '<'                       %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator<"; }
                | KW_OPERATOR CMP_LE                    %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator<="; }
                | KW_OPERATOR '>'                       %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator>"; }
                | KW_OPERATOR CMP_GE                    %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator>="; }
                | KW_OPERATOR CMP_EQ                    %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator=="; }
                | KW_OPERATOR CMP_NE                    %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator!="; }
                | KW_OPERATOR '&'                       %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator&"; }
                | KW_OPERATOR '^'                       %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator^"; }
                | KW_OPERATOR '|'                       %prec KW_OPERATOR       { NEW($$, Identifier); $$->name = "operator|"; }
                ;

/* Optional scope modifier keyword. */
ScopeMod        :                                                               { NEW($$, ScopeLocal); }
                | KW_EXPORT                                                     { NEW($$, ScopeParent); }
                | KW_GLOBAL                                                     { NEW($$, ScopeGlobal); }
                ;

/* Optional lifetime modifier keyword. */
LifetimeMod     :                                                               { NEW($$, LifetimeAutomatic); }
                | KW_STATIC                                                     { NEW($$, LifetimeStatic); }
                ;

/* Optional implementation style keyword. */
ImplMod         :                                                               { NEW($$, ImplementationAutomatic); }
                | KW_INLINE                                                     { NEW($$, ImplementationInline); }
                | KW_RUNTIME                                                    { NEW($$, ImplementationRuntime); }
                | KW_PRIMITIVE                                                  { NEW($$, ImplementationPrimitive); }
                ;

/* Modifier set. Note that while not everything accepts everything, the grammar
doesn't care. This is handled during semantic analysis. */
Modifiers       : ScopeMod LifetimeMod ImplMod                                  { NEW($$, Modifiers);
                                                                                    $$->scope.set_raw($1);
                                                                                    $$->lifetime.set_raw($2);
                                                                                    $$->implementation.set_raw($3);
                                                                                }
                ;

/* Annotation helper rules. */
AnnotationData  : SimpleIdent '.' SimpleIdent           %prec ANNOT             { NEW($$, AnnotationData);
                                                                                    $$->iface.set_raw($1);
                                                                                    $$->oper.set_raw($3);
                                                                                    $$->data.set_raw(new Void());
                                                                                }
                | SimpleIdent '.' SimpleIdent '(' OptUnit ')'
                                                        %prec ANNOT_ARGS        { NEW($$, AnnotationData);
                                                                                    $$->iface.set_raw($1);
                                                                                    $$->oper.set_raw($3);
                                                                                    $$->data.set_raw($5);
                                                                                }
                ;

Annotations     :                                                               { NEW($$, Annotations); }
                | Annotations '@' AnnotationData                                { FROM($$, $1);
                                                                                    $$->data.add_raw($3);
                                                                                }
                ;

/* Optional return type helper rule. */
ReturnType      :                                       %prec RETURN_TYPE       { NEW($$, Void); }
                | ARROW '(' OptUnit ')'                 %prec RETURN_TYPE       { FROM($$, $3); }
                ;

/* Control-flow block helper rules. */
IfElif          : Modifiers KW_IF Annotations '(' Unit ')' ReturnType Unit
                                                        %prec KW_IF             { NEW($$, IfElifElseBlock);
                                                                                    $$->modifiers.set_raw($1);
                                                                                    $$->annotations.set_raw($3);
                                                                                    $$->return_type.set_raw($7);
                                                                                    $$->arms.add_raw(new MatchArm());
                                                                                    $$->arms[0]->condition.set_raw($5);
                                                                                    $$->arms[0]->body.set_raw($8);
                                                                                }
                | IfElif KW_ELIF '(' Unit ')' Unit      %prec KW_ELIF           { FROM($$, $1);
                                                                                    auto arm = new MatchArm();
                                                                                    arm->condition.set_raw($4);
                                                                                    arm->body.set_raw($6);
                                                                                    $$->arms.add_raw(arm);
                                                                                }
                ;

MatchArms       :                                                               { NEW($$, MatchBlock); }
                | MatchArms KW_WHEN Unit ARROW Unit                             { FROM($$, $1);
                                                                                    auto arm = new MatchArm();
                                                                                    arm->condition.set_raw($3);
                                                                                    arm->body.set_raw($5);
                                                                                    $$->arms.add_raw(arm);
                                                                                }
                ;

MatchBody       : MatchArms                                                     { FROM($$, $1);
                                                                                    $$->otherwise.set_raw(new Void());
                                                                                }
                | MatchArms KW_ELSE Unit                                        { FROM($$, $1);
                                                                                    $$->otherwise.set_raw($3);
                                                                                }
                ;

LoopLabel       :                                                               { $$ = nullptr; }
                | '.' SimpleIdent                                               { FROM($$, $2); }
                ;

/* Function template symbol list helper rules */
TemplateSymList : SimpleIdent                                                   {}
                | TemplateSymList ',' SimpleIdent                               {}
                ;

TemplateSymbols :                                                               {}
                | '<' TemplateSymList '>'                                       {}
                ;

/* Units. */
OptUnit         : Unit                                  %prec OPT_UNIT          { FROM($$, $1); }
                |                                       %prec OPT_UNIT          { NEW($$, Void); }
                ;

OptUnitReturn   : Unit                                  %prec OPT_UNIT_RETURN   { FROM($$, $1); }
                |                                       %prec OPT_UNIT_RETURN   { NEW($$, Void); }
                ;

                /* Literal units */
Unit            : IntegerLiteral                                                { FROM($$, $1); }
                | RealLiteral                                                   { FROM($$, $1); }
                | StringLiteral                                                 { FROM($$, $1); }
                | JsonLiteral                                                   { FROM($$, $1); }

                /* Identifier unit */
                | Identifier                                                    { FROM($$, $1); }

                /* Packing/grouping parentheses unit */
                | '(' OptUnit ')'                                               { NEW($$, Parentheses);
                                                                                    $$->as_parentheses()->data.set_raw($2);
                                                                                }

                /* 1- and 2-dimensional unpacking units */
                | '*' Unit                              %prec PREFIX            { NEW($$, Unpack1d);
                                                                                    $$->as_unpack()->data.set_raw($2);
                                                                                }
                | POWER Unit                            %prec PREFIX            { NEW($$, Unpack2d);
                                                                                    $$->as_unpack()->data.set_raw($2);
                                                                                }

                /* Indexing unit */
                | Unit '[' OptUnit ']'                                          { NEW($$, PlainIndex);
                                                                                    $$->as_index()->data.set_raw($1);
                                                                                    $$->as_index()->index.set_raw($3);
                                                                                }
                | Unit '[' '[' Unit ']' ']'                                     { NEW($$, MatrixIndex);
                                                                                    $$->as_index()->data.set_raw($1);
                                                                                    $$->as_index()->index.set_raw($4);
                                                                                }
                | Unit '[' '[' KW_TRANSPOSE Unit ']' ']'                        { NEW($$, TransposedMatrixIndex);
                                                                                    $$->as_index()->data.set_raw($1);
                                                                                    $$->as_index()->index.set_raw($5);
                                                                                }

                /* Range unit */
                | Unit RANGE Unit                                               { NEW($$, RangeOperator);
                                                                                    $$->as_range_operator()->begin.set_raw($1);
                                                                                    $$->as_range_operator()->end.set_raw($3);
                                                                                }

                /* Overloadable unary operator units */
                | '+' Unit                              %prec PREFIX            { NEW($$, PositiveOperator);
                                                                                    $$->as_unary_operator()->operand.set_raw($2);
                                                                                }
                | '-' Unit                              %prec PREFIX            { NEW($$, NegativeOperator);
                                                                                    $$->as_unary_operator()->operand.set_raw($2);
                                                                                }
                | '~' Unit                              %prec PREFIX            { NEW($$, LogicalNotOperator);
                                                                                    $$->as_unary_operator()->operand.set_raw($2);
                                                                                }
                | '!' Unit                              %prec PREFIX            { NEW($$, BitwiseNotOperator);
                                                                                    $$->as_unary_operator()->operand.set_raw($2);
                                                                                }

                /* Overloadable binary operator units */
                | Unit POWER Unit                                               { NEW($$, PowerOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit '*' Unit                                                 { NEW($$, MultiplyOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit '/' Unit                                                 { NEW($$, TrueDivisionOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit INT_DIV Unit                                             { NEW($$, EuclidianDivisionOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit '%' Unit                                                 { NEW($$, ModuloOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit '+' Unit                                                 { NEW($$, AdditionOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit '-' Unit                                                 { NEW($$, SubtractionOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit SHL Unit                                                 { NEW($$, ShiftLeftOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit ARITH_SHR Unit                                           { NEW($$, ArithmeticShiftRightOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit LOGIC_SHR Unit                                           { NEW($$, LogicalShiftRightOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit '<' Unit                                                 { NEW($$, LessThanOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit CMP_LE Unit                                              { NEW($$, LessOrEqualOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit '>' Unit                                                 { NEW($$, GreaterThanOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit CMP_GE Unit                                              { NEW($$, GreaterOrEqualOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit CMP_EQ Unit                                              { NEW($$, EqualityOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit CMP_NE Unit                                              { NEW($$, InequalityOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit '&' Unit                                                 { NEW($$, BitwiseAndOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit '^' Unit                                                 { NEW($$, BitwiseXorOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }
                | Unit '|' Unit                                                 { NEW($$, BitwiseOrOperator);
                                                                                    $$->as_binary_operator()->lhs.set_raw($1);
                                                                                    $$->as_binary_operator()->rhs.set_raw($3);
                                                                                }

                /* Short-circuiting operators */
                | Unit LOGIC_AND Unit                                           { NEW($$, LogicalAndOperator);
                                                                                    $$->as_logical_and_operator()->lhs.set_raw($1);
                                                                                    $$->as_logical_and_operator()->rhs.set_raw($3);
                                                                                }
                | Unit LOGIC_OR Unit                                            { NEW($$, LogicalOrOperator);
                                                                                    $$->as_logical_or_operator()->lhs.set_raw($1);
                                                                                    $$->as_logical_or_operator()->rhs.set_raw($3);
                                                                                }
                | Unit KW_WHEN Unit KW_ELSE Unit        %prec TERNARY           { NEW($$, SelectionOperator);
                                                                                    $$->as_selection_operator()->when_true.set_raw($1);
                                                                                    $$->as_selection_operator()->condition.set_raw($3);
                                                                                    $$->as_selection_operator()->when_false.set_raw($5);
                                                                                }

                /* Simple assignment unit */
                | Unit '=' Unit                                                 { NEW($$, AssignmentOperator);
                                                                                    $$->as_assignment_operator()->target.set_raw($1);
                                                                                    $$->as_assignment_operator()->value.set_raw($3);
                                                                                }

                /* Increment/decrement units */
                | Unit INCREMENT                        %prec POSTFIX           { NEW($$, PostIncrementOperator);
                                                                                    $$->as_unary_mutating_operator()->target.set_raw($1);
                                                                                }
                | Unit DECREMENT                        %prec POSTFIX           { NEW($$, PostDecrementOperator);
                                                                                    $$->as_unary_mutating_operator()->target.set_raw($1);
                                                                                }
                | INCREMENT Unit                        %prec PREFIX            { NEW($$, PreIncrementOperator);
                                                                                    $$->as_unary_mutating_operator()->target.set_raw($2);
                                                                                }
                | DECREMENT Unit                        %prec PREFIX            { NEW($$, PreDecrementOperator);
                                                                                    $$->as_unary_mutating_operator()->target.set_raw($2);
                                                                                }

                /* Mutating assignment units */
                | Unit POWER_BY Unit                                            { NEW($$, PowerByOperator);
                                                                                    $$->as_binary_mutating_operator()->target.set_raw($1);
                                                                                    $$->as_binary_mutating_operator()->value.set_raw($3);
                                                                                }
                | Unit MULTIPLY_BY Unit                                         { NEW($$, MultiplyByOperator);
                                                                                    $$->as_binary_mutating_operator()->target.set_raw($1);
                                                                                    $$->as_binary_mutating_operator()->value.set_raw($3);
                                                                                }
                | Unit DIVIDE_BY Unit                                           { NEW($$, TrueDivideByOperator);
                                                                                    $$->as_binary_mutating_operator()->target.set_raw($1);
                                                                                    $$->as_binary_mutating_operator()->value.set_raw($3);
                                                                                }
                | Unit INT_DIV_BY Unit                                          { NEW($$, EuclidianDivideByOperator);
                                                                                    $$->as_binary_mutating_operator()->target.set_raw($1);
                                                                                    $$->as_binary_mutating_operator()->value.set_raw($3);
                                                                                }
                | Unit MODULO_BY Unit                                           { NEW($$, ModuloByOperator);
                                                                                    $$->as_binary_mutating_operator()->target.set_raw($1);
                                                                                    $$->as_binary_mutating_operator()->value.set_raw($3);
                                                                                }
                | Unit INCREMENT_BY Unit                                        { NEW($$, IncrementByOperator);
                                                                                    $$->as_binary_mutating_operator()->target.set_raw($1);
                                                                                    $$->as_binary_mutating_operator()->value.set_raw($3);
                                                                                }
                | Unit DECREMENT_BY Unit                                        { NEW($$, DecrementByOperator);
                                                                                    $$->as_binary_mutating_operator()->target.set_raw($1);
                                                                                    $$->as_binary_mutating_operator()->value.set_raw($3);
                                                                                }
                | Unit SHL_BY Unit                                              { NEW($$, ShiftLeftByOperator);
                                                                                    $$->as_binary_mutating_operator()->target.set_raw($1);
                                                                                    $$->as_binary_mutating_operator()->value.set_raw($3);
                                                                                }
                | Unit ARITH_SHR_BY Unit                                        { NEW($$, ArithmicallyShiftRightByOperator);
                                                                                    $$->as_binary_mutating_operator()->target.set_raw($1);
                                                                                    $$->as_binary_mutating_operator()->value.set_raw($3);
                                                                                }
                | Unit LOGIC_SHR_BY Unit                                        { NEW($$, LogicallyShiftRightByOperator);
                                                                                    $$->as_binary_mutating_operator()->target.set_raw($1);
                                                                                    $$->as_binary_mutating_operator()->value.set_raw($3);
                                                                                }
                | Unit BITWISE_AND_BY Unit                                      { NEW($$, BitwiseAndByOperator);
                                                                                    $$->as_binary_mutating_operator()->target.set_raw($1);
                                                                                    $$->as_binary_mutating_operator()->value.set_raw($3);
                                                                                }
                | Unit BITWISE_XOR_BY Unit                                      { NEW($$, BitwiseXorByOperator);
                                                                                    $$->as_binary_mutating_operator()->target.set_raw($1);
                                                                                    $$->as_binary_mutating_operator()->value.set_raw($3);
                                                                                }
                | Unit BITWISE_OR_BY Unit                                       { NEW($$, BitwiseOrByOperator);
                                                                                    $$->as_binary_mutating_operator()->target.set_raw($1);
                                                                                    $$->as_binary_mutating_operator()->value.set_raw($3);
                                                                                }

                /* Functions calls */
                | Unit '(' OptUnit ')'                                          { NEW($$, FunctionCall);
                                                                                    $$->as_function_call()->function.set_raw($1);
                                                                                    $$->as_function_call()->arguments.set_raw($3);
                                                                                }

                /* Block unit */
                | '{' OptUnit '}'                                               { NEW($$, Block);
                                                                                    $$->as_block()->data.set_raw($2);
                                                                                }

                /* Conditional units */
                | IfElif                                %prec KW_IF             { FROM($$, $1);
                                                                                    $$->as_if_elif_else_block()->otherwise.set_raw(new Void());
                                                                                }
                | IfElif KW_ELSE Unit                   %prec KW_ELSE           { FROM($$, $1);
                                                                                    $$->as_if_elif_else_block()->otherwise.set_raw($3);
                                                                                }
                | KW_COND Annotations '(' Unit ')' Unit %prec KW_COND           { NEW($$, IfElifElseBlock);
                                                                                    auto ieeb = static_cast<IfElifElseBlock*>($$);
                                                                                    ieeb->modifiers.set_raw(new Modifiers());
                                                                                    ieeb->modifiers->scope.set_raw(new ScopeLocal());
                                                                                    ieeb->modifiers->lifetime.set_raw(new LifetimeAutomatic());
                                                                                    ieeb->modifiers->implementation.set_raw(new ImplementationPrimitive());
                                                                                    ieeb->annotations.set_raw($2);
                                                                                    ieeb->return_type.set_raw(new Void());
                                                                                    ieeb->arms.add_raw(new MatchArm());
                                                                                    ieeb->arms[0]->condition.set_raw($4);
                                                                                    ieeb->arms[0]->body.set_raw($6);
                                                                                    ieeb->otherwise.set_raw(new Void());
                                                                                }
                | Modifiers KW_MATCH Annotations '(' Unit ')' ReturnType '{' MatchBody '}'
                                                        %prec KW_MATCH          { FROM($$, $9);
                                                                                    auto matb = static_cast<MatchBlock*>($$);
                                                                                    matb->modifiers.set_raw($1);
                                                                                    matb->annotations.set_raw($3);
                                                                                    matb->value.set_raw($5);
                                                                                    matb->return_type.set_raw($7);
                                                                                }

                /* Looping units */
                | Modifiers KW_FOR LoopLabel Annotations '(' Unit ')' Unit
                                                        %prec KW_FOR            { NEW($$, ForLoop);
                                                                                    $$->as_for_loop()->modifiers.set_raw($1);
                                                                                    if ($3) $$->as_for_loop()->label.set_raw($3);
                                                                                    $$->as_for_loop()->annotations.set_raw($4);
                                                                                    $$->as_for_loop()->control.set_raw($6);
                                                                                    $$->as_for_loop()->body.set_raw($8);
                                                                                }
                | Modifiers KW_FOREACH LoopLabel Annotations '(' Unit ')' Unit
                                                        %prec KW_FOREACH        { NEW($$, ForeachLoop);
                                                                                    $$->as_foreach_loop()->modifiers.set_raw($1);
                                                                                    if ($3) $$->as_foreach_loop()->label.set_raw($3);
                                                                                    $$->as_foreach_loop()->annotations.set_raw($4);
                                                                                    $$->as_foreach_loop()->control.set_raw($6);
                                                                                    $$->as_foreach_loop()->body.set_raw($8);
                                                                                }
                | Modifiers KW_WHILE LoopLabel Annotations '(' Unit ')' Unit
                                                        %prec KW_WHILE          { NEW($$, WhileLoop);
                                                                                    $$->as_while_loop()->modifiers.set_raw($1);
                                                                                    if ($3) $$->as_while_loop()->label.set_raw($3);
                                                                                    $$->as_while_loop()->annotations.set_raw($4);
                                                                                    $$->as_while_loop()->control.set_raw($6);
                                                                                    $$->as_while_loop()->body.set_raw($8);
                                                                                }
                | Modifiers KW_REPEAT LoopLabel Annotations Unit KW_UNTIL '(' Unit ')'
                                                        %prec KW_REPEAT         { NEW($$, RepeatUntilLoop);
                                                                                    $$->as_repeat_until_loop()->modifiers.set_raw($1);
                                                                                    if ($3) $$->as_repeat_until_loop()->label.set_raw($3);
                                                                                    $$->as_repeat_until_loop()->annotations.set_raw($4);
                                                                                    $$->as_repeat_until_loop()->control.set_raw($8);
                                                                                    $$->as_repeat_until_loop()->body.set_raw($5);
                                                                                }

                /* Special control-flow statements */
                | KW_GOTO SimpleIdent                   %prec KW_GOTO           { NEW($$, GotoStatement);
                                                                                    $$->as_goto_statement()->target.set_raw($2);
                                                                                }
                | KW_RETURN OptUnitReturn               %prec KW_RETURN         { NEW($$, ReturnStatement);
                                                                                    $$->as_return_statement()->value.set_raw($2);
                                                                                }
                | KW_BREAK                              %prec KW_BREAK          { NEW($$, BreakStatement); }
                | KW_BREAK SimpleIdent                  %prec KW_BREAK          { NEW($$, BreakStatement);
                                                                                    if ($2) $$->as_break_statement()->label.set_raw($2);
                                                                                }
                | KW_CONTINUE                           %prec KW_CONTINUE       { NEW($$, ContinueStatement); }
                | KW_CONTINUE SimpleIdent               %prec KW_CONTINUE       { NEW($$, ContinueStatement);
                                                                                    if ($2) $$->as_continue_statement()->label.set_raw($2);
                                                                                }
                | KW_SEND '(' Unit ')'                  %prec KW_SEND           { NEW($$, SendStatement);
                                                                                    $$->as_send_statement()->data.set_raw($3);
                                                                                }
                | KW_RECEIVE '(' Unit ')'               %prec KW_RECEIVE        { NEW($$, ReceiveStatement);
                                                                                    $$->as_receive_statement()->expected_type.set_raw($3);
                                                                                }
                | Modifiers KW_PRINT '(' OptUnit ')'    %prec KW_PRINT          { NEW($$, PrintStatement);
                                                                                    $$->as_print_statement()->modifiers.set_raw($1);
                                                                                    $$->as_print_statement()->data.set_raw($4);
                                                                                }
                | Modifiers KW_ABORT '(' OptUnit ')'    %prec KW_ABORT          { NEW($$, AbortStatement);
                                                                                    $$->as_abort_statement()->modifiers.set_raw($1);
                                                                                    $$->as_abort_statement()->data.set_raw($4);
                                                                                }

                /* Annotation units */
                | Unit '@' AnnotationData                                       { NEW($$, Annotation);
                                                                                    $$->as_annotation()->target.set_raw($1);
                                                                                    $$->as_annotation()->data.set_raw($3);
                                                                                }
                | KW_PRAGMA AnnotationData              %prec KW_PRAGMA         { NEW($$, Pragma);
                                                                                    $$->as_pragma()->data.set_raw($2);
                                                                                }

                /* Object definitions */
                | Modifiers KW_QUBIT Unit                                       { NEW($$, QubitDefinition);
                                                                                    $$->as_qubit_definition()->modifiers.set_raw($1);
                                                                                    $$->as_qubit_definition()->data.set_raw($3);
                                                                                }
                | Modifiers KW_VAR Unit                                         { NEW($$, VariableDefinition);
                                                                                    $$->as_variable_definition()->modifiers.set_raw($1);
                                                                                    $$->as_variable_definition()->data.set_raw($3);
                                                                                }
                | Modifiers KW_CONST Unit                                       { NEW($$, ConstantDefinition);
                                                                                    $$->as_constant_definition()->modifiers.set_raw($1);
                                                                                    $$->as_constant_definition()->data.set_raw($3);
                                                                                }

                /* Alias definitions */
                | Modifiers KW_ALIAS Unit                                       { NEW($$, AliasDefinition);
                                                                                    $$->as_alias_definition()->modifiers.set_raw($1);
                                                                                    $$->as_alias_definition()->data.set_raw($3);
                                                                                }

                /* Function definitions */
                | KW_FUTURE KW_FUNCTION Identifier TemplateSymbols '(' OptUnit ')' ReturnType
                                                        %prec KW_FUNCTION       { NEW($$, FunctionDeclaration);
                                                                                    $$->as_function_declaration()->name.set_raw($3);
                                                                                    $$->as_function_declaration()->parameters.set_raw($6);
                                                                                    $$->as_function_declaration()->return_type.set_raw($8);
                                                                                }
                | Modifiers KW_FUNCTION Identifier Annotations TemplateSymbols '(' OptUnit ')' ReturnType Unit
                                                        %prec KW_FUNCTION       { NEW($$, FunctionDefinition);
                                                                                    $$->as_function_definition()->modifiers.set_raw($1);
                                                                                    $$->as_function_definition()->name.set_raw($3);
                                                                                    $$->as_function_definition()->annotations.set_raw($4);
                                                                                    $$->as_function_definition()->parameters.set_raw($7);
                                                                                    $$->as_function_definition()->return_type.set_raw($9);
                                                                                    $$->as_function_definition()->body.set_raw($10);
                                                                                }

                /* Type definitions */
                | Modifiers KW_TYPE Identifier ':' Unit                         { NEW($$, SumTypeDefinition);
                                                                                    $$->as_sum_type_definition()->modifiers.set_raw($1);
                                                                                    $$->as_sum_type_definition()->name.set_raw($3);
                                                                                    $$->as_sum_type_definition()->values.set_raw($5);
                                                                                }
                | Modifiers KW_TYPE Identifier '=' Unit '{' OptUnit '}'         { NEW($$, DerivedTypeDefinition);
                                                                                    $$->as_derived_type_definition()->modifiers.set_raw($1);
                                                                                    $$->as_derived_type_definition()->name.set_raw($3);
                                                                                    $$->as_derived_type_definition()->base.set_raw($5);
                                                                                    $$->as_derived_type_definition()->definitions.set_raw($7);
                                                                                }

                /* File header definitions */
                | KW_PARAMETER Unit                                             { NEW($$, ParameterDefinition);
                                                                                    $$->as_parameter_definition()->data.set_raw($2);
                                                                                }
                | KW_INCLUDE StringLiteral                                      { NEW($$, IncludeDirective);
                                                                                    $$->as_include_directive()->path.set_raw($2);
                                                                                    $$->as_include_directive()->associations.set_raw(new Void());
                                                                                }
                | KW_INCLUDE StringLiteral '(' Unit ')'                         { NEW($$, IncludeDirective);
                                                                                    $$->as_include_directive()->path.set_raw($2);
                                                                                    $$->as_include_directive()->associations.set_raw($4);
                                                                                }

                /* Grammatical units (semantics are not context-free) */
                | KW_TEMPLATE Unit                                              { NEW($$, TemplateMarker);
                                                                                    $$->as_template_marker()->data.set_raw($2);
                                                                                }
                | Unit ':' Unit                                                 { NEW($$, Colon);
                                                                                    $$->as_colon()->lhs.set_raw($1);
                                                                                    $$->as_colon()->rhs.set_raw($3);
                                                                                }
                | Unit ',' Unit                                                 { FROM($$, flatten<CommaSeparated>($1, $3)); }
                | Unit ','                                                      { FROM($$, flatten<CommaSeparated>($1)); }
                | Unit ';' Unit                                                 { FROM($$, flatten<SemicolonSeparated>($1, $3)); }
                | Unit ';'                                                      { FROM($$, flatten<SemicolonSeparated>($1)); }

                /* Error recovery marker */
                | BAD_NUMBER                                                    { NEW($$, ErroneousUnit); }
                | BAD_CHARACTER                                                 { NEW($$, ErroneousUnit); }
                | error                                                         { NEW($$, ErroneousUnit); }
                ;

/* Version header */
VersionBuilder  : KW_VERSION DecIntLiteral                                      { NEW($$, Version);
                                                                                    $$->items.add_raw($2);
                                                                                }
                | Version '.' DecIntLiteral                                     { FROM($$, $1);
                                                                                    $$->items.add_raw($3);
                                                                                }
                ;

Version         : VersionBuilder                                                { FROM($$, $1); }
                | VersionBuilder ';'                                            { FROM($$, $1); }
                ;

/* Toplevel */
Program         : Version Unit                                                  { NEW($$, Program);
                                                                                    $$->as_program()->version.set_raw($1);
                                                                                    $$->as_program()->data.set_raw($2);
                                                                                }
                ;

Root            : Program                                                       { helper.result.root.set_raw($1); }
                | error                                                         { helper.result.root.set_raw(new ErroneousProgram()); }

%%

void yyerror(YYLTYPE* yyllocp, yyscan_t unused, cqasm::v2::parser::ParseHelper &helper, const char* msg) {
    (void)unused;
    std::ostringstream sb;
    sb << helper.filename
       << ":"  << yyllocp->first_line
       << ":"  << yyllocp->first_column
       << ": " << msg;
    helper.push_error(sb.str());
}
